/*
 * Copyright 2008-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'nu.studer:gradle-plugindev-plugin:1.0.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'nu.studer.plugindev'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.ben-manes.versions'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'

repositories {
    jcenter()
    flatDir { dir 'lib' }
}

configurations {
    uberjar
}

dependencies {
    compile gradleApi()
    uberjar ':clirr-core-uber:0.6.1'
    compile 'org.yaml:snakeyaml:1.15'

    testCompile('org.spockframework:spock-core:1.0-groovy-2.3') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile ':clirr-core-uber:0.6.1'
}

sourceSets {
    main {
        compileClasspath += [configurations.uberjar]
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = projectSourceCompatibility
    targetCompatibility = projectTargetCompatibility
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = projectSourceCompatibility
    targetCompatibility = projectTargetCompatibility
}

javadoc {
    classpath += [configurations.uberjar]
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.uberjar]
    }
}

plugindev {
    pluginId = 'org.kordamp.gradle.clirr'
    pluginImplementationClass 'org.kordamp.gradle.clirr.ClirrPlugin'
    pluginDescription 'Clirr is a tool that checks Java libraries for binary and source compatibility with older releases.'
    pluginLicenses 'Apache-2.0'
    pluginTags 'gradle', 'plugin', 'clirr'
    authorId 'aalmiray'
    authorName 'Andres Almiray'
    authorEmail 'aalmiray@yahoo.com'
    projectUrl 'https://github.com/aalmiray/clirr-gradle-plugin'
    projectInceptionYear '2014'
    done()
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''

bintray {
    user = project.bintrayUsername
    key = project.bintrayApiKey
    pkg.repo = 'kordamp'
}

import java.text.SimpleDateFormat

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

shadowJar {
    configurations = [project.configurations.uberjar]
    baseName = project.name
    classifier = ''

    manifest {
        attributes(
            'Built-By': System.properties['user.name'],
            'Created-By': System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ' ' + System.properties["java.vm.version"] + ')',
            'Build-Date': project.buildDate,
            'Build-Time': project.buildTime,
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
}
jar.finalizedBy shadowJar

